import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Alert, AlertDescription } from '@/components/ui/alert';\nimport {\n  Activity,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Eye,\n  EyeOff,\n  RefreshCw,\n  Shield,\n  Wifi,\n  WifiOff,\n  XCircle,\n  Zap\n} from 'lucide-react';\nimport { useAuth } from '@/context/AuthContext';\nimport { useConnectionMonitor } from '@/hooks/useConnectionMonitor';\nimport AuthDebugPanel from './AuthDebugPanel';\n\ninterface AuthMonitorWidgetProps {\n  enabledByDefault?: boolean;\n  position?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n}\n\nconst AuthMonitorWidget: React.FC<AuthMonitorWidgetProps> = ({\n  enabledByDefault = process.env.NODE_ENV === 'development',\n  position = 'bottom-right'\n}) => {\n  const { user, sessionHealth, error, retryAuth } = useAuth();\n  const { connectionState, getConnectionSummary, getRecentEvents, performHealthPing } = useConnectionMonitor();\n  \n  const [isVisible, setIsVisible] = useState(false);\n  const [isMinimized, setIsMinimized] = useState(true);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n  const [refreshInterval, setRefreshInterval] = useState<NodeJS.Timeout | null>(null);\n\n  const summary = getConnectionSummary();\n  const recentEvents = getRecentEvents(20);\n\n  // Auto-refresh summary every 5 seconds when visible and enabled\n  useEffect(() => {\n    if (isVisible && autoRefresh) {\n      const interval = setInterval(() => {\n        // Trigger a re-render by calling the summary function\n        getConnectionSummary();\n      }, 5000);\n      setRefreshInterval(interval);\n    } else if (refreshInterval) {\n      clearInterval(refreshInterval);\n      setRefreshInterval(null);\n    }\n\n    return () => {\n      if (refreshInterval) {\n        clearInterval(refreshInterval);\n      }\n    };\n  }, [isVisible, autoRefresh, getConnectionSummary]);\n\n  const getPositionClasses = () => {\n    switch (position) {\n      case 'bottom-left':\n        return 'bottom-4 left-4';\n      case 'top-right':\n        return 'top-4 right-4';\n      case 'top-left':\n        return 'top-4 left-4';\n      default:\n        return 'bottom-4 right-4';\n    }\n  };\n\n  const getOverallHealthStatus = () => {\n    if (!user || sessionHealth === 'unhealthy' || !connectionState.isOnline) {\n      return { status: 'critical', color: 'text-red-500', icon: XCircle };\n    }\n    if (sessionHealth === 'degraded' || !connectionState.apiReachable || connectionState.consecutiveFailures > 0) {\n      return { status: 'warning', color: 'text-yellow-500', icon: AlertTriangle };\n    }\n    return { status: 'healthy', color: 'text-green-500', icon: CheckCircle };\n  };\n\n  const overallHealth = getOverallHealthStatus();\n  const StatusIcon = overallHealth.icon;\n\n  // Show floating indicator when not visible\n  if (!isVisible) {\n    return (\n      <div className={`fixed ${getPositionClasses()} z-50 flex items-center gap-2`}>\n        {/* Health Status Indicator */}\n        <div className={`p-2 rounded-full bg-white/90 backdrop-blur-sm border-2 shadow-lg ${overallHealth.status === 'critical' ? 'border-red-200' : overallHealth.status === 'warning' ? 'border-yellow-200' : 'border-green-200'}`}>\n          <StatusIcon className={`h-4 w-4 ${overallHealth.color}`} />\n        </div>\n        \n        {/* Show Debug Button only in development or when errors occur */}\n        {(enabledByDefault || error || sessionHealth !== 'healthy') && (\n          <Button\n            onClick={() => setIsVisible(true)}\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"bg-white/90 backdrop-blur-sm\"\n            title=\"Open Auth Monitor\"\n          >\n            <Eye className=\"h-4 w-4\" />\n            <span className=\"ml-1\">Monitor</span>\n          </Button>\n        )}\n      </div>\n    );\n  }\n\n  if (isMinimized) {\n    return (\n      <div className={`fixed ${getPositionClasses()} z-50`}>\n        <Card className=\"bg-white/95 backdrop-blur-sm shadow-lg border-2 w-80\">\n          <CardHeader className=\"pb-2\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <Shield className=\"h-4 w-4 text-blue-600\" />\n                <CardTitle className=\"text-sm\">Auth Monitor</CardTitle>\n                <StatusIcon className={`h-4 w-4 ${overallHealth.color}`} />\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <Button\n                  onClick={() => setIsMinimized(false)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  title=\"Expand\"\n                >\n                  <Activity className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  onClick={() => setIsVisible(false)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  title=\"Hide\"\n                >\n                  <EyeOff className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"pt-0\">\n            <div className=\"grid grid-cols-3 gap-2 text-xs\">\n              <div className=\"text-center\">\n                <div className=\"flex items-center justify-center gap-1\">\n                  {user ? <CheckCircle className=\"h-3 w-3 text-green-500\" /> : <XCircle className=\"h-3 w-3 text-red-500\" />}\n                  <span>User</span>\n                </div>\n                <Badge variant={user ? \"default\" : \"secondary\"} className=\"text-xs\">\n                  {user ? 'Auth' : 'None'}\n                </Badge>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"flex items-center justify-center gap-1\">\n                  {connectionState.isOnline ? <Wifi className=\"h-3 w-3 text-green-500\" /> : <WifiOff className=\"h-3 w-3 text-red-500\" />}\n                  <span>Network</span>\n                </div>\n                <Badge variant={connectionState.isOnline ? \"default\" : \"secondary\"} className=\"text-xs capitalize\">\n                  {connectionState.connectionQuality}\n                </Badge>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"flex items-center justify-center gap-1\">\n                  <Activity className=\"h-3 w-3 text-blue-500\" />\n                  <span>Session</span>\n                </div>\n                <Badge \n                  variant={sessionHealth === 'healthy' ? \"default\" : sessionHealth === 'degraded' ? \"outline\" : \"secondary\"} \n                  className=\"text-xs capitalize\"\n                >\n                  {sessionHealth}\n                </Badge>\n              </div>\n            </div>\n            \n            {error && (\n              <Alert className=\"mt-2 border-red-200 bg-red-50\">\n                <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n                <AlertDescription className=\"text-xs\">\n                  {error.type.toUpperCase()}: {error.message.substring(0, 60)}...\n                  {error.canRetry && (\n                    <Button\n                      onClick={retryAuth}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"ml-2 h-6 text-xs\"\n                    >\n                      Retry\n                    </Button>\n                  )}\n                </AlertDescription>\n              </Alert>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`fixed ${getPositionClasses()} z-50 w-96 max-h-[calc(100vh-2rem)]`}>\n      <Card className=\"bg-white/95 backdrop-blur-sm shadow-lg border-2\">\n        <CardHeader className=\"pb-2\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <Shield className=\"h-5 w-5 text-blue-600\" />\n              <CardTitle className=\"text-lg\">Auth Monitor</CardTitle>\n              <StatusIcon className={`h-5 w-5 ${overallHealth.color}`} />\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Button\n                onClick={() => {\n                  setAutoRefresh(!autoRefresh);\n                }}\n                variant=\"ghost\"\n                size=\"sm\"\n                title={autoRefresh ? \"Disable auto-refresh\" : \"Enable auto-refresh\"}\n              >\n                <Zap className={`h-4 w-4 ${autoRefresh ? 'text-blue-500' : 'text-gray-400'}`} />\n              </Button>\n              <Button\n                onClick={() => setIsMinimized(true)}\n                variant=\"ghost\"\n                size=\"sm\"\n                title=\"Minimize\"\n              >\n                <Activity className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                onClick={() => setIsVisible(false)}\n                variant=\"ghost\"\n                size=\"sm\"\n                title=\"Hide\"\n              >\n                <EyeOff className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          <Tabs defaultValue=\"status\" className=\"space-y-4\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"status\" className=\"text-xs\">Status</TabsTrigger>\n              <TabsTrigger value=\"events\" className=\"text-xs\">Events</TabsTrigger>\n              <TabsTrigger value=\"debug\" className=\"text-xs\">Debug</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"status\" className=\"space-y-3\">\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div className=\"p-2 rounded-lg border bg-gray-50\">\n                  <div className=\"text-xs font-medium mb-1\">Authentication</div>\n                  <div className=\"flex items-center gap-2\">\n                    {user ? <CheckCircle className=\"h-4 w-4 text-green-500\" /> : <XCircle className=\"h-4 w-4 text-red-500\" />}\n                    <span className=\"text-xs\">{user ? `${user.email}` : 'Not authenticated'}</span>\n                  </div>\n                </div>\n                \n                <div className=\"p-2 rounded-lg border bg-gray-50\">\n                  <div className=\"text-xs font-medium mb-1\">Session Health</div>\n                  <div className=\"flex items-center gap-2\">\n                    {sessionHealth === 'healthy' ? <CheckCircle className=\"h-4 w-4 text-green-500\" /> :\n                     sessionHealth === 'degraded' ? <AlertTriangle className=\"h-4 w-4 text-yellow-500\" /> :\n                     <XCircle className=\"h-4 w-4 text-red-500\" />}\n                    <span className=\"text-xs capitalize\">{sessionHealth}</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div className=\"p-2 rounded-lg border bg-gray-50\">\n                  <div className=\"text-xs font-medium mb-1\">Connection</div>\n                  <div className=\"flex items-center gap-2\">\n                    {connectionState.isOnline ? <Wifi className=\"h-4 w-4 text-green-500\" /> : <WifiOff className=\"h-4 w-4 text-red-500\" />}\n                    <span className=\"text-xs capitalize\">{connectionState.connectionQuality}</span>\n                  </div>\n                </div>\n                \n                <div className=\"p-2 rounded-lg border bg-gray-50\">\n                  <div className=\"text-xs font-medium mb-1\">API Status</div>\n                  <div className=\"flex items-center gap-2\">\n                    {connectionState.apiReachable ? <CheckCircle className=\"h-4 w-4 text-green-500\" /> : <XCircle className=\"h-4 w-4 text-red-500\" />}\n                    <span className=\"text-xs\">{connectionState.apiReachable ? 'Reachable' : 'Unreachable'}</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button\n                  onClick={performHealthPing}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"flex-1 text-xs\"\n                >\n                  <RefreshCw className=\"h-3 w-3 mr-1\" />\n                  Ping API\n                </Button>\n                <Button\n                  onClick={retryAuth}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"flex-1 text-xs\"\n                  disabled={!error?.canRetry}\n                >\n                  <Shield className=\"h-3 w-3 mr-1\" />\n                  Retry Auth\n                </Button>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"events\">\n              <ScrollArea className=\"h-48\">\n                <div className=\"space-y-2\">\n                  {recentEvents.length === 0 ? (\n                    <div className=\"text-xs text-gray-500 text-center py-4\">No events recorded</div>\n                  ) : (\n                    recentEvents.map((event, index) => (\n                      <div key={index} className=\"p-2 rounded-lg border bg-gray-50 text-xs\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {event.type.replace('_', ' ')}\n                          </Badge>\n                          <span className=\"text-xs text-gray-500\">\n                            {event.timestamp.toLocaleTimeString()}\n                          </span>\n                        </div>\n                        <div className=\"text-xs text-gray-600\">\n                          {JSON.stringify(event.details, null, 0)}\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </ScrollArea>\n            </TabsContent>\n\n            <TabsContent value=\"debug\">\n              <ScrollArea className=\"h-48\">\n                <div className=\"text-xs font-mono bg-gray-50 rounded-lg p-3\">\n                  <pre className=\"whitespace-pre-wrap\">\n                    {JSON.stringify(summary, null, 2)}\n                  </pre>\n                </div>\n              </ScrollArea>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default AuthMonitorWidget;